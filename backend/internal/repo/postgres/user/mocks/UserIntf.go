// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	dto "backend/internal/repo/dto"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// UserIntf is an autogenerated mock type for the UserIntf type
type UserIntf struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, request
func (_m *UserIntf) Add(ctx context.Context, request *dto.AddUserRequest) (*dto.AddUserResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 *dto.AddUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.AddUserRequest) (*dto.AddUserResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.AddUserRequest) *dto.AddUserResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.AddUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.AddUserRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByEmail provides a mock function with given fields: ctx, request
func (_m *UserIntf) GetByEmail(ctx context.Context, request *dto.GetUserByEmailRequest) (*dto.GetUserResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}

	var r0 *dto.GetUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.GetUserByEmailRequest) (*dto.GetUserResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.GetUserByEmailRequest) *dto.GetUserResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.GetUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.GetUserByEmailRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserIntf creates a new instance of UserIntf. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserIntf(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserIntf {
	mock := &UserIntf{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
